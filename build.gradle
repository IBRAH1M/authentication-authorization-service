plugins {
    id 'org.springframework.boot' version '2.2.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'groovy'
    id 'idea'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.2.2.RELEASE'
    implementation 'org.springframework.security:spring-security-data'
//    implementation 'org.apache.commons:commons-lang3'
    implementation 'org.flywaydb:flyway-core'

    compileOnly 'io.springfox:springfox-swagger2:2.9.2'
    compileOnly 'io.springfox:springfox-swagger-ui:2.9.2'
    compileOnly 'org.mapstruct:mapstruct:1.3.1.Final'
    compileOnly 'org.projectlombok:lombok'

    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
    annotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'mysql:mysql-connector-java'

    // TESTS DEPENDENCIES
    //Unit tests
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mapstruct:mapstruct:1.3.1.Final'
    testImplementation 'org.spockframework:spock-spring:1.3-groovy-2.5'
    //E2E tests
    testCompile "io.rest-assured:rest-assured:4.3.0"

    testRuntime 'com.h2database:h2'
}

import groovy.json.JsonSlurper

task smokeTest() {
    doLast {
        def p = ['curl', '$smokeTestUrl/api/actuator/health', '--insecure'].execute()
        def jsonSlurper = new JsonSlurper()
        def health = jsonSlurper.parseText(p.text)
        if (health?.status != 'UP') {
            throw new RuntimeException('Healthcheck failed')
        }
    }
}
